{"version":3,"file":"static/js/932.d5a30013.chunk.js","mappings":"uQAGO,SAAeA,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,uFACkBC,EAAAA,GAAAA,IAAA,iBAAoBD,EAApB,aADlB,cACCE,EADD,yBAEEA,EAASC,MAFX,kEAFPF,EAAAA,GAAAA,SAAAA,QAAyBG,+BACzBH,EAAAA,GAAAA,SAAAA,OAAwB,CAAEI,QAASD,oC,eCDtBE,E,OAAOC,QAAAA,GAAH,sN,kBCwEjB,EAhEa,WACX,OAAkCC,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA0BF,EAAAA,EAAAA,WAAS,GAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAwBJ,EAAAA,EAAAA,UAAS,IAAjC,eAAOK,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,IAAU,MAAtBD,QAeR,OAdAE,EAAAA,EAAAA,YAAU,YACR,iBAAC,2FACCL,GAAS,GACTF,GAAa,GAFd,kBAIsBX,EAAgBgB,GAJtC,OAISZ,EAJT,OAKGW,EAAQX,EAAKU,MALhB,gDAOGD,GAAS,GAPZ,yBASGF,GAAa,GAThB,2EAAD,EAYD,GAAE,CAACK,IACAJ,GAAc,gDACdF,GAEA,SAACH,EAAD,UACGY,MAAM,IACJC,KAAK,GACLC,KAAI,SAACC,EAAGC,GAAJ,OACH,2BACE,SAAC,IAAD,CAAUC,OAAQ,OAClB,yBACE,SAAC,IAAD,OAEF,wBACE,SAAC,IAAD,QANKD,EADN,OAeX,SAAChB,EAAD,UACGO,EAAKW,OAAS,EACbX,EAAKO,KAAI,gBAAGK,EAAH,EAAGA,KAAMC,EAAT,EAASA,aAAcC,EAAvB,EAAuBA,UAAW3B,EAAlC,EAAkCA,GAAlC,OACP,2BAEI,gBACE4B,IACEF,EACI,kCAAoCA,EACpCG,EAENC,IAAKL,KAGT,wBAAKA,KACL,uCAAeE,OAZR3B,EADF,KAiBT,iEAIP,C","sources":["api/getMovieCredits.js","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\naxios.defaults.baseURL = process.env.REACT_APP_BASE_URL;\naxios.defaults.params = { api_key: process.env.REACT_APP_API_KEY };\nexport async function getMovieCredits(id) {\n  const response = await axios.get(`/movie/${id}/credits`);\n  return response.data;\n}\n","import styled from 'styled-components';\nexport const List = styled.ul`\n  display: grid;\n  gap: 15px;\n  grid-template-columns: repeat(7, 1fr);\n  list-style: none;\n  li {\n    text-align: center;\n  }\n  img {\n    display: block;\n    max-width: 100%;\n  }\n`;\n","import Skeleton from 'react-loading-skeleton';\nimport 'react-loading-skeleton/dist/skeleton.css';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCredits } from 'api/getMovieCredits';\nimport { List } from './Cast.styled';\nimport noPhotoImg from './img/nophoto.png';\n\nconst Cast = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams(null);\n  useEffect(() => {\n    (async () => {\n      setError(false);\n      setIsLoading(true);\n      try {\n        const data = await getMovieCredits(movieId);\n        setCast(data.cast);\n      } catch (message) {\n        setError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n  }, [movieId]);\n  if (error) return <p>Something went wrong</p>;\n  if (isLoading) {\n    return (\n      <List>\n        {Array(15)\n          .fill(0)\n          .map((_, i) => (\n            <li key={i}>\n              <Skeleton height={260} />\n              <h4>\n                <Skeleton />\n              </h4>\n              <p>\n                <Skeleton />\n              </p>\n            </li>\n          ))}\n      </List>\n    );\n  }\n  return (\n    <List>\n      {cast.length > 0 ? (\n        cast.map(({ name, profile_path, character, id }) => (\n          <li key={id}>\n            {\n              <img\n                src={\n                  profile_path\n                    ? 'https://image.tmdb.org/t/p/w500' + profile_path\n                    : noPhotoImg\n                }\n                alt={name}\n              ></img>\n            }\n            <h4>{name}</h4>\n            <p>Character: {character}</p>\n          </li>\n        ))\n      ) : (\n        <div>There is no information about cast</div>\n      )}\n    </List>\n  );\n};\nexport default Cast;\n"],"names":["getMovieCredits","id","axios","response","data","process","api_key","List","styled","useState","isLoading","setIsLoading","error","setError","cast","setCast","movieId","useParams","useEffect","Array","fill","map","_","i","height","length","name","profile_path","character","src","noPhotoImg","alt"],"sourceRoot":""}