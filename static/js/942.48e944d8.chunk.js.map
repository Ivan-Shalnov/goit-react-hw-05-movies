{"version":3,"file":"static/js/942.48e944d8.chunk.js","mappings":"8PAGO,SAAeA,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,uFACkBC,EAAAA,GAAAA,IAAA,iBAAoBD,IADtC,cACCE,EADD,yBAEEA,EAASC,MAFX,kEAFPF,EAAAA,GAAAA,SAAAA,QAAyBG,+BACzBH,EAAAA,GAAAA,SAAAA,OAAwB,CAAEI,QAASD,oC,4BCDtBE,EAAOC,EAAAA,QAAAA,IAAH,8EAKJC,EAASD,EAAAA,QAAAA,IAAH,iPAeNE,EAAYF,EAAAA,QAAAA,IAAH,yC,qDCnBTG,EAAW,SAAAC,GACtB,OACE,UAAC,MAAD,gBAAMC,MAAO,CAAEC,QAAS,OAAQC,QAAS,UAAeH,GAAxD,eACE,SAAC,MAAD,CAAeC,MAAO,CAAEG,cAAe,YADzC,UAKH,ECAYC,EAAY,SAAC,GAAiB,IAAD,EAAdC,EAAc,EAAdA,QAC1B,GAAkCC,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA0BF,EAAAA,EAAAA,WAAS,GAAnC,eAAOG,EAAP,KAAcC,EAAd,KACMC,GAAWC,EAAAA,EAAAA,MACjBC,QAAQC,IAAIH,EAASI,OACrB,OAAkCT,EAAAA,EAAAA,UAAS,MAA3C,eAAOU,EAAP,KAAkBC,EAAlB,KACMC,EAAYF,GAAuC,IAAjB,OAATA,QAAS,IAATA,OAAA,EAAAA,EAAWG,eAAmBC,QAAQ,GAAK,EAe1E,OAdAC,EAAAA,EAAAA,YAAU,YACR,iBAAC,2FACCb,GAAa,GACbE,GAAS,GAFV,kBAIsBvB,EAAgBkB,GAJtC,OAISd,EAJT,OAKG0B,EAAa1B,GALhB,gDAOGmB,EAAS,EAAD,IAPX,yBASGF,GAAa,GAThB,2EAAD,EAYD,GAAE,CAACH,IACAI,GAAc,iDAEhB,iCACW,OAARE,QAAQ,IAARA,GAAA,UAAAA,EAAUI,aAAV,eAAiBO,QAAQ,SAACxB,EAAD,CAAUyB,GAAIZ,EAASI,MAAMO,QACvD,SAAC5B,EAAD,UACGa,GACC,iCACE,SAACX,EAAD,WACE,SAAC,IAAD,CAAU4B,OAAO,YAEnB,UAAC3B,EAAD,YACE,yBACE,SAAC,IAAD,CAAU4B,MAAM,YAElB,SAAC,IAAD,CAAUA,MAAM,UAChB,yBACE,SAAC,IAAD,CAAUA,MAAM,WAElB,wBACE,SAAC,IAAD,CAAUC,MAAO,OAEnB,yBACE,SAAC,IAAD,CAAUD,MAAM,WAElB,wBACGE,MAAM,GACJC,KAAK,GACLC,KAAI,SAACC,EAAGC,GAAJ,OACH,yBAAa,SAAC,IAAD,CAAUN,MAAM,SAApBM,EADN,aAOb,iCACE,SAACnC,EAAD,WACE,gBACEoC,IACEhB,EAAUiB,YACN,kCAAoCjB,EAAUiB,YAC9CC,EAENC,IAAKnB,EAAUoB,WAGnB,UAACvC,EAAD,YACE,wBAAKmB,EAAUoB,SACf,wCAAgBlB,EAAhB,QACA,sCACA,uBAAIF,EAAUqB,YACd,oCACA,wBACGrB,EAAUsB,OAAOT,KAAI,gBAAGU,EAAH,EAAGA,KAAMnD,EAAT,EAASA,GAAT,OACpB,wBAAcmD,GAALnD,EADW,gBAUrC,EClED,EAvBqB,WACnB,IAAQiB,GAAYmC,EAAAA,EAAAA,MAAZnC,QAER,OACE,4BACE,SAACD,EAAD,CAAWC,QAASA,KACpB,4BACE,oDACA,2BACE,yBACE,SAAC,KAAD,CAAMkB,GAAE,kBAAalB,EAAb,SAAR,qBAEF,yBACE,SAAC,KAAD,CAAMkB,GAAE,kBAAalB,EAAb,YAAR,8BAIN,SAAC,EAAAoC,SAAD,CAAUC,UAAU,gDAApB,UACE,SAAC,KAAD,QAIP,C","sources":["api/getMovieDetails.js","components/MovieCard/MovieCard.styled.jsx","components/BackLink/BackLink.jsx","components/MovieCard/MovieCard.jsx","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\naxios.defaults.baseURL = process.env.REACT_APP_BASE_URL;\naxios.defaults.params = { api_key: process.env.REACT_APP_API_KEY };\nexport async function getMovieDetails(id) {\n  const response = await axios.get(`/movie/${id}`);\n  return response.data;\n}\n","import styled from 'styled-components';\nexport const Wrap = styled.div`\n  padding-top: 15px;\n  display: flex;\n  gap: 15px;\n`;\nexport const Poster = styled.div`\n  flex-shrink: 0;\n  width: 250px;\n  height: 375px;\n  border-radius: 5px;\n  overflow: hidden;\n  img {\n    display: block;\n    width: 100%;\n    height: 100%;\n\n    max-width: 100%;\n    max-height: 100%;\n  }\n`;\nexport const MovieInfo = styled.div`\n  flex-grow: 1;\n`;\n","import { IoMdArrowBack } from 'react-icons/io';\nimport { Link } from 'react-router-dom';\nexport const BackLink = props => {\n  return (\n    <Link style={{ padding: '15px', display: 'block' }} {...props}>\n      <IoMdArrowBack style={{ verticalAlign: 'middle' }} />\n      Back\n    </Link>\n  );\n};\n","import PropTypes from 'prop-types';\nimport Skeleton from 'react-loading-skeleton';\nimport 'react-loading-skeleton/dist/skeleton.css';\nimport { useEffect, useState } from 'react';\nimport { getMovieDetails } from 'api/getMovieDetails';\nimport { Poster, Wrap, MovieInfo } from './MovieCard.styled';\nimport noPosterImage from './img/noposter.png';\nimport { useLocation } from 'react-router-dom';\nimport { BackLink } from 'components/BackLink/BackLink';\nexport const MovieCard = ({ movieId }) => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const location = useLocation();\n  console.log(location.state);\n  const [movieData, setMovieData] = useState(null);\n  const userScore = movieData ? (movieData?.vote_average * 10).toFixed(1) : 0;\n  useEffect(() => {\n    (async () => {\n      setIsLoading(true);\n      setError(false);\n      try {\n        const data = await getMovieDetails(movieId);\n        setMovieData(data);\n      } catch (message) {\n        setError(message);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n  }, [movieId]);\n  if (error) return <p>Something went wrong</p>;\n  return (\n    <>\n      {location?.state?.from && <BackLink to={location.state.from} />}\n      <Wrap>\n        {isLoading ? (\n          <>\n            <Poster>\n              <Skeleton height=\"100%\" />\n            </Poster>\n            <MovieInfo>\n              <h2>\n                <Skeleton width=\"15em\" />\n              </h2>\n              <Skeleton width=\"10em\" />\n              <h3>\n                <Skeleton width=\"5em\" />\n              </h3>\n              <p>\n                <Skeleton count={5} />\n              </p>\n              <h3>\n                <Skeleton width=\"5em\" />\n              </h3>\n              <ul>\n                {Array(5)\n                  .fill(0)\n                  .map((_, i) => (\n                    <li key={i}>{<Skeleton width=\"5em\" />}</li>\n                  ))}\n              </ul>\n            </MovieInfo>\n          </>\n        ) : (\n          <>\n            <Poster>\n              <img\n                src={\n                  movieData.poster_path\n                    ? 'https://image.tmdb.org/t/p/w500' + movieData.poster_path\n                    : noPosterImage\n                }\n                alt={movieData.title}\n              />\n            </Poster>\n            <MovieInfo>\n              <h2>{movieData.title}</h2>\n              <p>User Score: {userScore}%</p>\n              <h3>Overview</h3>\n              <p>{movieData.overview}</p>\n              <h3>Genres</h3>\n              <ul>\n                {movieData.genres.map(({ name, id }) => (\n                  <li key={id}>{name}</li>\n                ))}\n              </ul>\n            </MovieInfo>\n          </>\n        )}\n      </Wrap>\n    </>\n  );\n};\nMovieCard.propTypes = {\n  movieId: PropTypes.string.isRequired,\n};\n","import { MovieCard } from 'components/MovieCard/MovieCard';\nimport { Link, Outlet, useParams } from 'react-router-dom';\nimport { Suspense } from 'react';\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n\n  return (\n    <div>\n      <MovieCard movieId={movieId}></MovieCard>\n      <div>\n        <h2>Additional information</h2>\n        <ul>\n          <li>\n            <Link to={`/movies/${movieId}/cast`}>Cast</Link>\n          </li>\n          <li>\n            <Link to={`/movies/${movieId}/reviews`}>Reviews</Link>\n          </li>\n        </ul>\n      </div>\n      <Suspense fallback={<div>Loading subpage...</div>}>\n        <Outlet />\n      </Suspense>\n    </div>\n  );\n};\nexport default MovieDetails;\n"],"names":["getMovieDetails","id","axios","response","data","process","api_key","Wrap","styled","Poster","MovieInfo","BackLink","props","style","padding","display","verticalAlign","MovieCard","movieId","useState","isLoading","setIsLoading","error","setError","location","useLocation","console","log","state","movieData","setMovieData","userScore","vote_average","toFixed","useEffect","from","to","height","width","count","Array","fill","map","_","i","src","poster_path","noPosterImage","alt","title","overview","genres","name","useParams","Suspense","fallback"],"sourceRoot":""}